version: '3.9'

x-logging: &logging
  logging:
    driver: loki
    options:
      loki-url: "http://host.docker.internal:3100/loki/api/v1/push"

services:
  exporter:
    image: quay.io/prometheuscommunity/elasticsearch-exporter:latest
    <<: *logging
    hostname: "exporter-kbn-${STACK_VERSION}"
    networks:
      - es-dev
      - mon
    command:
      - '--es.uri=https://kibana_system:SecretPassowrd@es01:9200'
      - '--es.ssl-skip-verify'
      - '--es.all'

  imposter:
    image: outofcoffee/imposter
    hostname: "imposter-kbn-${STACK_VERSION}"
    networks:
      - es-dev
      - mon
    <<: *logging
    environment:
      - JAVA_OPTS="-Xmx512m -Xss512k -Dfile.encoding=UTF-8 -XX:MaxRAM=800m -XX:MaxRAMPercentage=95 -XX:MinRAMPercentage=60A"
      - MALLOC_ARENA_MAX=1
    volumes:
      - ./config/imposter:/opt/imposter/config

  setup:
    hostname: setup
    user: "0"
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    networks:
      - es-dev
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R 1000:1000 config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 3; echo "Trying again"; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 3; echo "Trying again"; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    hostname: es01
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    networks:
      - es-dev
    <<: *logging
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - node.name=es01
      - discovery.type=single-node
      - discovery.seed_hosts=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - ingest.geoip.downloader.enabled=false
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  index-pattern:
    image: curlimages/curl
    depends_on:
      - es01
    command: >
      sh -c '
        curl -k -sS https://raw.githubusercontent.com/wazuh/wazuh/v4.3.4/extensions/elasticsearch/7.x/wazuh-template.json > /tmp/t.json
        curl -k -sS -u elastic:${KIBANA_PASSWORD} -X  PUT 'https://es01:9200/_template/wazuh' -H 'Content-Type: application/json' -d @/tmp/t.json 
      '

  kibana:
    hostname: kibana
    user: node
    init: true
    depends_on:
      es01:
        condition: service_healthy
    image: quay.io/wazuh/kbn-dev:${STACK_VERSION}
    networks:
      - es-dev
    volumes:
      - "${SRC}:/home/node/kbn/plugins/wazuh"
      - certs:/home/node/kbn/config/certs
      - ./config/kibana/kibana.yml://home/node/kbn/config/kibana.yml
      - ./config/kibana/wazuh.yml:/home/node/kbn/data/wazuh/config/wazuh.yml
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      # Kibana configuration is in the mounted config file, as the entrypoint
      # does not generate the config file from the envirtonment
      - LOGS=/proc/1/fd/1
    entrypoint: ["tail", "-f", "/dev/null"]

networks:
  es-dev:
    name: es-dev-${STACK_VERSION}
    driver: bridge
  mon:
    external: true

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
